openapi: 3.0.3
info:
  title: Bingo API
  description: API for the Bingo application
  version: 1.0.0
  contact:
    email: admin@example.com
servers:
  - url: http://localhost:8000/api
    description: Local development server
paths:
  /auth/register/:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "Verification email sent. Please check your inbox."
        400:
          description: Invalid input data
  /auth/verify-email/:
    post:
      summary: Verify user's email address
      operationId: verifyEmail
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        200:
          description: Email successfully verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verified successfully"
        400:
          description: Invalid token or already verified
  /auth/resend-verification/:
    post:
      summary: Resend verification email
      operationId: resendVerification
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
      responses:
        200:
          description: Verification email sent again
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification email sent"
        400:
          description: Invalid email or already verified
  /auth/token/:
    post:
      summary: Get JWT token
      operationId: getToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        200:
          description: Token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        401:
          description: Invalid credentials
  /auth/token/refresh/:
    post:
      summary: Refresh JWT token
      operationId: refreshToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        401:
          description: Invalid refresh token
  /auth/facebook/:
    post:
      summary: Login with Facebook
      operationId: facebookLogin
      tags:
        - Social Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacebookLoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLoginResponse'
        400:
          description: Invalid access token
  /auth/google/:
    post:
      summary: Login with Google
      operationId: googleLogin
      tags:
        - Social Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleLoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLoginResponse'
        400:
          description: Invalid access token
  /users/:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
    post:
      summary: Create a user
      operationId: createUser
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
        401:
          description: Unauthorized
  /events/:
    get:
      summary: List all events
      operationId: listEvents
      tags:
        - Events
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        401:
          description: Unauthorized
    post:
      summary: Create an event
      operationId: createEvent
      tags:
        - Events
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        201:
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid input
        401:
          description: Unauthorized

  /events/{id}/patterns/:
    get:
      summary: Get patterns allowed for an event
      operationId: getEventPatterns
      tags:
        - Events
        - Winning Patterns
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Event ID
      responses:
        200:
          description: List of patterns allowed for this event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WinningPattern'
        401:
          description: Unauthorized
        404:
          description: Event not found

  /events/{id}/set_patterns/:
    post:
      summary: Set allowed patterns for an event
      operationId: setEventPatterns
      tags:
        - Events
        - Winning Patterns
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Event ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pattern_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - pattern_ids
      responses:
        200:
          description: Patterns set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  patterns:
                    type: array
                    items:
                      $ref: '#/components/schemas/WinningPattern'
        400:
          description: Invalid request
        401:
          description: Unauthorized
        404:
          description: Event not found

  /cards/:
    get:
      summary: List all bingo cards
      operationId: listCards
      tags:
        - Bingo Cards
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of bingo cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BingoCard'
        401:
          description: Unauthorized

  /cards/{id}/verify_pattern/:
    get:
      summary: Verify if a specific pattern is completed on a card
      operationId: verifyCardPattern
      tags:
        - Bingo Cards
        - Winning Patterns
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Card ID
        - name: pattern
          in: query
          required: false
          schema:
            type: string
          description: Pattern name to check. Default is 'bingo' which checks all patterns.
      responses:
        200:
          description: Pattern verification result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the pattern is completed
                  card_id:
                    type: string
                    format: uuid
                  event_id:
                    type: string
                    format: uuid
                  called_numbers:
                    type: array
                    items:
                      type: integer
                  winning_pattern:
                    $ref: '#/components/schemas/WinningPatternDetail'
                  message:
                    type: string
        401:
          description: Unauthorized
        404:
          description: Card not found

  /ws/event/{eventId}/:
    get:
      summary: WebSocket endpoint for bingo game events
      description: |
        Connect to this endpoint with a WebSocket client.
        Include the JWT token as a query parameter: `?token=your_jwt_token`
        
        ### WebSocket Messages:
        
        #### Client to Server:
        - `JOIN_GAME`: Join a specific bingo event room
        - `CALL_NUMBER`: Call a bingo number (admin only)
        - `CLAIM_WIN`: Claim a winning card
        - `CHAT_MESSAGE`: Send a chat message to the room
        
        #### Server to Client:
        - `event_info`: Event details when connected
        - `user_cards`: User's cards for this event
        - `number_called`: A new number was called
        - `winner_announcement`: Someone won the game
        - `player_joined`: A new player joined the game
        - `chat_message`: Chat message from a player
        - `error`: Error message from server
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the bingo event to connect to
        - name: token
          in: query
          required: false
          schema:
            type: string
          description: JWT access token for authentication
      tags:
        - WebSockets
  /winning-patterns/:
    get:
      summary: List all winning patterns
      operationId: listWinningPatterns
      tags:
        - Winning Patterns
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of winning patterns
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WinningPattern'
        401:
          description: Unauthorized
    post:
      summary: Create a winning pattern
      operationId: createWinningPattern
      tags:
        - Winning Patterns
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WinningPatternCreate'
      responses:
        201:
          description: Winning pattern created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WinningPattern'
        400:
          description: Invalid input
        401:
          description: Unauthorized

  /winning-patterns/{id}/:
    get:
      summary: Get a specific winning pattern
      operationId: getWinningPattern
      tags:
        - Winning Patterns
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Winning pattern details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WinningPattern'
        401:
          description: Unauthorized
        404:
          description: Winning pattern not found
    put:
      summary: Update a winning pattern
      operationId: updateWinningPattern
      tags:
        - Winning Patterns
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WinningPatternCreate'
      responses:
        200:
          description: Winning pattern updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WinningPattern'
        400:
          description: Invalid input
        401:
          description: Unauthorized
        404:
          description: Winning pattern not found
    delete:
      summary: Delete a winning pattern
      operationId: deleteWinningPattern
      tags:
        - Winning Patterns
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Winning pattern deleted
        401:
          description: Unauthorized
        404:
          description: Winning pattern not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        is_active:
          type: boolean
        is_verified:
          type: boolean
        date_joined:
          type: string
          format: date-time
          readOnly: true
      required:
        - email
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string
      required:
        - email
        - password
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        first_name:
          type: string
        last_name:
          type: string
      required:
        - email
        - password
    VerifyEmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        verification_code:
          type: string
          description: Verification code sent to the user's email
      required:
        - email
        - verification_code
    ResendVerificationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    TokenRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    TokenResponse:
      type: object
      properties:
        access:
          type: string
          description: JWT access token
        refresh:
          type: string
          description: JWT refresh token
      required:
        - access
        - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          description: JWT refresh token
      required:
        - refresh
    FacebookLoginRequest:
      type: object
      properties:
        access_token:
          type: string
          description: Facebook access token
      required:
        - access_token
    GoogleLoginRequest:
      type: object
      properties:
        access_token:
          type: string
          description: Google access token
      required:
        - access_token
    SocialLoginResponse:
      type: object
      properties:
        access:
          type: string
          description: JWT access token
        refresh:
          type: string
          description: JWT refresh token
        user:
          $ref: '#/components/schemas/User'
      required:
        - access
        - refresh
        - user
    Event:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        is_live:
          type: boolean
          description: Indicates if the event is currently live
        creator:
          type: integer
      required:
        - name
        - start_date
    EventCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
      required:
        - name
        - start_date
    BingoCard:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        event:
          type: integer
          description: Event ID
        user:
          type: integer
          description: User ID
        squares:
          type: array
          items:
            type: object
            properties:
              position:
                type: integer
              text:
                type: string
              checked:
                type: boolean
      required:
        - event
        - user
    WinningPattern:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        display_name:
          type: string
        positions:
          type: array
          items:
            type: integer
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        created_by:
          type: object
          properties:
            id:
              type: integer
            email:
              type: string
              format: email
      required:
        - id
        - name
        - display_name
        - positions
        - is_active
    
    WinningPatternCreate:
      type: object
      properties:
        name:
          type: string
        display_name:
          type: string
        positions:
          type: array
          items:
            type: integer
        is_active:
          type: boolean
      required:
        - name
        - display_name
        - positions

    WinningPatternDetail:
      type: object
      properties:
        pattern_name:
          type: string
        display_name:
          type: string
        positions:
          type: array
          items:
            type: integer
        matched_numbers:
          type: array
          items:
            type: string
      required:
        - pattern_name
        - positions

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
